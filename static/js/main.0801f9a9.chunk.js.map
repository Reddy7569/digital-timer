{"version":3,"sources":["components/DigitalTimer/index.js","App.js","index.js"],"names":["initialState","isTimerRunning","timeElapsedInSeconds","timerLimitInMinutes","DigitalTimer","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","clearTimerInterval","clearInterval","intervalId","onDecreaseTimerLimitInMinutes","setState","prevState","onIncreaseTimerLimitInMinutes","renderTimerLimitController","_this$state","isButtonsDisabled","_jsxs","className","children","_jsx","disabled","onClick","type","onResetTimer","incrementTimeElapsedInSeconds","_this$state2","onStartOrPauseTimer","_this$state3","setInterval","renderTimerController","startOrPauseImageUrl","startOrPauseAltText","alt","src","getElapsedSecondsInTimeFormat","_this$state4","totalRemainingSeconds","minutes","Math","floor","seconds","stringifiedMinutes","stringifiedSeconds","_inherits","_createClass","key","value","this","labelText","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0801f9a9.chunk.js","sourcesContent":["// Write your code here\nimport {Component} from 'react'\nimport './index.css'\n\nconst initialState = {\n  isTimerRunning: false,\n  timeElapsedInSeconds: 0,\n  timerLimitInMinutes: 25,\n}\n\nclass DigitalTimer extends Component {\n  state = initialState\n\n  componentWillUnmount() {\n    this.clearTimerInterval()\n  }\n\n  clearTimerInterval = () => clearInterval(this.intervalId)\n\n  onDecreaseTimerLimitInMinutes = () => {\n    const {timerLimitInMinutes} = this.state\n\n    if (timerLimitInMinutes > 1) {\n      this.setState(prevState => ({\n        timerLimitInMinutes: prevState.timerLimitInMinutes - 1,\n      }))\n    }\n  }\n\n  onIncreaseTimerLimitInMinutes = () =>\n    this.setState(prevState => ({\n      timerLimitInMinutes: prevState.timerLimitInMinutes + 1,\n    }))\n\n  renderTimerLimitController = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isButtonsDisabled = timeElapsedInSeconds > 0\n\n    return (\n      <div className=\"timer-limit-controller-container\">\n        <p className=\"limit-label\">Set Timer limit</p>\n        <div className=\"timer-limit-controller\">\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onDecreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            -\n          </button>\n          <div className=\"limit-label-and-value-container\">\n            <p className=\"limit-value\">{timerLimitInMinutes}</p>\n          </div>\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onIncreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  onResetTimer = () => {\n    this.clearTimerInterval()\n    this.setState(initialState)\n  }\n\n  incrementTimeElapsedInSeconds = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.clearTimerInterval()\n      this.setState({isTimerRunning: false})\n    } else {\n      this.setState(prevState => ({\n        timeElapsedInSeconds: prevState.timeElapsedInSeconds + 1,\n      }))\n    }\n  }\n\n  onStartOrPauseTimer = () => {\n    const {\n      isTimerRunning,\n      timeElapsedInSeconds,\n      timerLimitInMinutes,\n    } = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.setState({timeElapsedInSeconds: 0})\n    }\n    if (isTimerRunning) {\n      this.clearTimerInterval()\n    } else {\n      this.intervalId = setInterval(this.incrementTimeElapsedInSeconds, 1000)\n    }\n    this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\n  }\n\n  renderTimerController = () => {\n    const {isTimerRunning} = this.state\n    const startOrPauseImageUrl = isTimerRunning\n      ? 'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\n      : 'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\n    const startOrPauseAltText = isTimerRunning ? 'pause icon' : 'play icon'\n\n    return (\n      <div className=\"timer-controller-container\">\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onStartOrPauseTimer}\n          type=\"button\"\n        >\n          <img\n            alt={startOrPauseAltText}\n            className=\"timer-controller-icon\"\n            src={startOrPauseImageUrl}\n          />\n          <p className=\"timer-controller-label\">\n            {isTimerRunning ? 'Pause' : 'Start'}\n          </p>\n        </button>\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onResetTimer}\n          type=\"button\"\n        >\n          <img\n            alt=\"reset icon\"\n            className=\"timer-controller-icon\"\n            src=\"https://assets.ccbp.in/frontend/react-js/reset-icon-img.png\"\n          />\n          <p className=\"timer-controller-label\">Reset</p>\n        </button>\n      </div>\n    )\n  }\n\n  getElapsedSecondsInTimeFormat = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const totalRemainingSeconds =\n      timerLimitInMinutes * 60 - timeElapsedInSeconds\n    const minutes = Math.floor(totalRemainingSeconds / 60)\n    const seconds = Math.floor(totalRemainingSeconds % 60)\n    const stringifiedMinutes = minutes > 9 ? minutes : `0${minutes}`\n    const stringifiedSeconds = seconds > 9 ? seconds : `0${seconds}`\n\n    return `${stringifiedMinutes}:${stringifiedSeconds}`\n  }\n\n  render() {\n    const {isTimerRunning} = this.state\n    const labelText = isTimerRunning ? 'Running' : 'Paused'\n\n    return (\n      <div className=\"app-container\">\n        <h1 className=\"heading\">Digital Timer</h1>\n        <div className=\"digital-timer-container\">\n          <div className=\"timer-display-container\">\n            <div className=\"elapsed-time-container\">\n              <h1 className=\"elapsed-time\">\n                {this.getElapsedSecondsInTimeFormat()}\n              </h1>\n              <p className=\"timer-state\">{labelText}</p>\n            </div>\n          </div>\n          <div className=\"controls-container\">\n            {this.renderTimerController()}\n            {this.renderTimerLimitController()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DigitalTimer\n","import DigitalTimer from './components/DigitalTimer'\n\nimport './App.css'\n\nconst App = () => <DigitalTimer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}